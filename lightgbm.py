# -*- coding: utf-8 -*-
"""lightgbm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mieo_lP0hcTiJMz5u_rusl6OoI8AFNgC
"""

import os
os.environ['KAGGLE_CONFIG_DIR'] = '/content'

"""**Download the PlantVillage Dataset**"""

!kaggle datasets download -d emmarex/plantdisease

"""**Unzip the PlantVillage Dataset**"""

!unzip \*.zip && rm *.zip

!ls /content/PlantVillage

"""**Import Libraries**"""

!pip install lightgbm

import os
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from tensorflow.keras.applications import MobileNet
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet import preprocess_input
import lightgbm as lgb
from PIL import Image

"""**Load and Preprocess Images**"""

def load_images(image_dir, img_size=(224, 224)):
    images = []
    labels = []
    classes = sorted(os.listdir(image_dir))
    for label in classes:
        class_dir = os.path.join(image_dir, label)
        if os.path.isdir(class_dir):
            for img_name in os.listdir(class_dir):
                img_path = os.path.join(class_dir, img_name)
                try:
                    # Open and process the image
                    img = Image.open(img_path).convert('RGB')
                    img = img.resize(img_size)
                    img_array = image.img_to_array(img)
                    img_array = preprocess_input(img_array)
                    images.append(img_array)
                    labels.append(label)
                except Exception as e:
                    print(f"Error loading image {img_path}: {e}")
    if not images:
        raise ValueError("No valid images found in the dataset directory.")
    return np.array(images), np.array(labels), classes

"""**Feature Extraction Using MobileNet**"""

def extract_features(images, model):
    features = model.predict(images, batch_size=32, verbose=1)
    return features

mobilenet_model = MobileNet(weights='imagenet', include_top=False, pooling='avg', input_shape=(224, 224, 3))

image_dir = '/content/plantvillage/PlantVillage'

images, labels, class_names = load_images(image_dir)

"""**Ensure there are no empty arrays**"""

if len(images) == 0 or len(labels) == 0:
    raise ValueError("No images or labels found. Please check the dataset directory.")

features = extract_features(images, mobilenet_model)

"""**Convert labels to numerical format**"""

label_to_index = {label: idx for idx, label in enumerate(class_names)}
numerical_labels = np.array([label_to_index[label] for label in labels])

"""**Split the data**"""

X_train, X_test, y_train, y_test = train_test_split(features, numerical_labels, test_size=0.2, random_state=42)

"""**Create LightGBM dataset**"""

train_data = lgb.Dataset(X_train, label=y_train)
test_data = lgb.Dataset(X_test, label=y_test, reference=train_data)

"""**Set parameters**"""

params = {
    'objective': 'multiclass',
    'num_class': len(class_names),
    'metric': 'multi_logloss',
    'boosting_type': 'gbdt',
    'learning_rate': 0.05,
    'num_leaves': 31,
    'verbose': -1
}

lgb_model = lgb.train(params, train_data, valid_sets=[train_data, test_data], num_boost_round=100)

"""**Predict**"""

y_pred = lgb_model.predict(X_test, num_iteration=lgb_model.best_iteration)
y_pred_max = np.argmax(y_pred, axis=1)

"""**Classification report**"""

print(classification_report(y_test, y_pred_max, target_names=class_names))

"""**Save the LightGBM mode**"""

model_file = 'lgb_model.txt'
lgb_model.save_model(model_file)

print(f"Model saved to {model_file}")